///////////////////////////////////////////////////////////////////////////
// C++ code generated with wxFormBuilder (version Apr 21 2008)
// http://www.wxformbuilder.org/
//
// PLEASE DO "NOT" EDIT THIS FILE!
///////////////////////////////////////////////////////////////////////////

#include "Triva3DFrame.h"

#include "TrivaAutoGeneratedGUI.h"

///////////////////////////////////////////////////////////////////////////

AutoGUI_Triva::AutoGUI_Triva( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	
	wxBoxSizer* bSizer3;
	bSizer3 = new wxBoxSizer( wxHORIZONTAL );
	
	m3DFrame = new Triva3DFrame( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	bSizer3->Add( m3DFrame, 1, wxEXPAND|wxALL|wxALIGN_CENTER_HORIZONTAL, 0 );
	
	scrollbar = new wxScrollBar( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSB_VERTICAL );
	bSizer3->Add( scrollbar, 0, wxALL|wxEXPAND, 5 );
	
	this->SetSizer( bSizer3 );
	this->Layout();
	m_menubar2 = new wxMenuBar( 0 );
	application = new wxMenu();
	wxMenuItem* m_menuItem6;
	m_menuItem6 = new wxMenuItem( application, wxID_OPEN, wxString( wxT("Load &KAAPI Bundle") ) , wxEmptyString, wxITEM_NORMAL );
	application->Append( m_menuItem6 );
	
	wxMenuItem* m_menuItem5;
	m_menuItem5 = new wxMenuItem( application, wxID_EXIT, wxString( wxT("E&xit") ) , wxEmptyString, wxITEM_NORMAL );
	application->Append( m_menuItem5 );
	
	m_menubar2->Append( application, wxT("Application") );
	
	m_menu3 = new wxMenu();
	clabels = new wxMenuItem( m_menu3, wxID_ANY, wxString( wxT("Containers Labels") ) , wxEmptyString, wxITEM_CHECK );
	m_menu3->Append( clabels );
	clabels->Enable( false );
	clabels->Check( true );
	
	slabels = new wxMenuItem( m_menu3, wxID_ANY, wxString( wxT("States Labels") ) , wxEmptyString, wxITEM_CHECK );
	m_menu3->Append( slabels );
	slabels->Enable( false );
	slabels->Check( true );
	
	wxMenuItem* m_menuItem61;
	m_menuItem61 = new wxMenuItem( m_menu3, wxID_ANY, wxString( wxT("Fullscreen") ) + wxT('\t') + wxT("ALT+F"), wxEmptyString, wxITEM_CHECK );
	m_menu3->Append( m_menuItem61 );
	
	m_menu3->AppendSeparator();
	
	wxMenuItem* m_menuItem17;
	m_menuItem17 = new wxMenuItem( m_menu3, wxID_ANY, wxString( wxT("Visualization Base") ) , wxEmptyString, wxITEM_NORMAL );
	m_menu3->Append( m_menuItem17 );
	
	wxMenuItem* m_menuItem15;
	m_menuItem15 = new wxMenuItem( m_menu3, wxID_ANY, wxString( wxT("Combined Counter") ) , wxEmptyString, wxITEM_NORMAL );
	m_menu3->Append( m_menuItem15 );
	
	wxMenuItem* m_menuItem14;
	m_menuItem14 = new wxMenuItem( m_menu3, wxID_ANY, wxString( wxT("Preferences") ) , wxEmptyString, wxITEM_NORMAL );
	m_menu3->Append( m_menuItem14 );
	
	m_menubar2->Append( m_menu3, wxT("View") );
	
	navigation = new wxMenu();
	wxMenuItem* forward;
	forward = new wxMenuItem( navigation, wxID_ANY, wxString( wxT("Forward") ) + wxT('\t') + wxT("ALT+8"), wxEmptyString, wxITEM_NORMAL );
	navigation->Append( forward );
	
	wxMenuItem* backward;
	backward = new wxMenuItem( navigation, wxID_ANY, wxString( wxT("Backward") ) + wxT('\t') + wxT("ALT+2"), wxEmptyString, wxITEM_NORMAL );
	navigation->Append( backward );
	
	wxMenuItem* left;
	left = new wxMenuItem( navigation, wxID_ANY, wxString( wxT("Left") ) + wxT('\t') + wxT("ALT+6"), wxEmptyString, wxITEM_NORMAL );
	navigation->Append( left );
	
	wxMenuItem* right;
	right = new wxMenuItem( navigation, wxID_ANY, wxString( wxT("Right") ) + wxT('\t') + wxT("ALT+6"), wxEmptyString, wxITEM_NORMAL );
	navigation->Append( right );
	
	wxMenuItem* up;
	up = new wxMenuItem( navigation, wxID_ANY, wxString( wxT("Up") ) + wxT('\t') + wxT("ALT+7"), wxEmptyString, wxITEM_NORMAL );
	navigation->Append( up );
	
	wxMenuItem* down;
	down = new wxMenuItem( navigation, wxID_ANY, wxString( wxT("Down") ) + wxT('\t') + wxT("ALT+1"), wxEmptyString, wxITEM_NORMAL );
	navigation->Append( down );
	
	m_menubar2->Append( navigation, wxT("Camera") );
	
	m_menu6 = new wxMenu();
	wxMenuItem* m_menuItem9;
	m_menuItem9 = new wxMenuItem( m_menu6, wxID_ABOUT, wxString( wxT("About...") ) , wxEmptyString, wxITEM_NORMAL );
	m_menu6->Append( m_menuItem9 );
	
	m_menubar2->Append( m_menu6, wxT("Help") );
	
	this->SetMenuBar( m_menubar2 );
	
	toolbar = this->CreateToolBar( wxTB_DOCKABLE|wxTB_NOICONS|wxTB_TEXT, wxID_ANY ); 
	playButton = new wxButton( toolbar, wxID_ANY, wxT("Play"), wxDefaultPosition, wxDefaultSize, 0 );
	toolbar->AddControl( playButton );
	pauseButton = new wxButton( toolbar, wxID_ANY, wxT("Pause"), wxDefaultPosition, wxDefaultSize, 0 );
	toolbar->AddControl( pauseButton );
	toolbar->AddSeparator();
	ZoomInB = new wxButton( toolbar, wxID_ANY, wxT("Zoom&In"), wxDefaultPosition, wxDefaultSize, 0 );
	toolbar->AddControl( ZoomInB );
	zoomOutB = new wxButton( toolbar, wxID_ANY, wxT("zoom&Out"), wxDefaultPosition, wxDefaultSize, 0 );
	toolbar->AddControl( zoomOutB );
	toolbar->AddSeparator();
	colorButton = new wxButton( toolbar, wxID_ANY, wxT("Color"), wxDefaultPosition, wxDefaultSize, 0 );
	colorButton->Enable( false );
	
	toolbar->AddControl( colorButton );
	toolbar->AddSeparator();
	mergeButton = new wxButton( toolbar, wxID_ANY, wxT("Merge"), wxDefaultPosition, wxDefaultSize, 0 );
	mergeButton->Enable( false );
	
	toolbar->AddControl( mergeButton );
	toolbar->Realize();
	
	statusBar = this->CreateStatusBar( 1, wxST_SIZEGRIP, wxID_ANY );
	
	this->Centre( wxBOTH );
	
	// Connect Events
	this->Connect( wxEVT_KILL_FOCUS, wxFocusEventHandler( AutoGUI_Triva::killFocus ) );
	this->Connect( wxEVT_SET_FOCUS, wxFocusEventHandler( AutoGUI_Triva::setFocus ) );
	scrollbar->Connect( wxEVT_SCROLL_TOP, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	scrollbar->Connect( wxEVT_SCROLL_BOTTOM, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	scrollbar->Connect( wxEVT_SCROLL_LINEUP, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	scrollbar->Connect( wxEVT_SCROLL_LINEDOWN, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	scrollbar->Connect( wxEVT_SCROLL_PAGEUP, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	scrollbar->Connect( wxEVT_SCROLL_PAGEDOWN, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	scrollbar->Connect( wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	scrollbar->Connect( wxEVT_SCROLL_THUMBRELEASE, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	scrollbar->Connect( wxEVT_SCROLL_CHANGED, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	this->Connect( m_menuItem6->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::loadBundle ) );
	this->Connect( m_menuItem5->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::exit ) );
	this->Connect( clabels->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::containerLabels ) );
	this->Connect( slabels->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::stateLabels ) );
	this->Connect( m_menuItem61->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::fullscreenSelection ) );
	this->Connect( m_menuItem17->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::guiBaseSelection ) );
	this->Connect( m_menuItem15->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::guiCombinedCounterSelection ) );
	this->Connect( m_menuItem14->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::guiPreferencesSelection ) );
	this->Connect( forward->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::cameraForward ) );
	this->Connect( backward->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::cameraBackward ) );
	this->Connect( left->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::cameraLeft ) );
	this->Connect( right->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::cameraRight ) );
	this->Connect( up->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::cameraUp ) );
	this->Connect( down->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::cameraDown ) );
	this->Connect( m_menuItem9->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::about ) );
	playButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Triva::playClicked ), NULL, this );
	pauseButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Triva::pauseClicked ), NULL, this );
	ZoomInB->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Triva::zoomIn ), NULL, this );
	zoomOutB->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Triva::zoomOut ), NULL, this );
	colorButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Triva::changeColor ), NULL, this );
	mergeButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Triva::mergeSelected ), NULL, this );
}

AutoGUI_Triva::~AutoGUI_Triva()
{
	// Disconnect Events
	this->Disconnect( wxEVT_KILL_FOCUS, wxFocusEventHandler( AutoGUI_Triva::killFocus ) );
	this->Disconnect( wxEVT_SET_FOCUS, wxFocusEventHandler( AutoGUI_Triva::setFocus ) );
	scrollbar->Disconnect( wxEVT_SCROLL_TOP, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	scrollbar->Disconnect( wxEVT_SCROLL_BOTTOM, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	scrollbar->Disconnect( wxEVT_SCROLL_LINEUP, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	scrollbar->Disconnect( wxEVT_SCROLL_LINEDOWN, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	scrollbar->Disconnect( wxEVT_SCROLL_PAGEUP, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	scrollbar->Disconnect( wxEVT_SCROLL_PAGEDOWN, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	scrollbar->Disconnect( wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	scrollbar->Disconnect( wxEVT_SCROLL_THUMBRELEASE, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	scrollbar->Disconnect( wxEVT_SCROLL_CHANGED, wxScrollEventHandler( AutoGUI_Triva::scrollbarEvent ), NULL, this );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::loadBundle ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::exit ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::containerLabels ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::stateLabels ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::fullscreenSelection ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::guiBaseSelection ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::guiCombinedCounterSelection ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::guiPreferencesSelection ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::cameraForward ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::cameraBackward ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::cameraLeft ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::cameraRight ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::cameraUp ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::cameraDown ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( AutoGUI_Triva::about ) );
	playButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Triva::playClicked ), NULL, this );
	pauseButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Triva::pauseClicked ), NULL, this );
	ZoomInB->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Triva::zoomIn ), NULL, this );
	zoomOutB->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Triva::zoomOut ), NULL, this );
	colorButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Triva::changeColor ), NULL, this );
	mergeButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Triva::mergeSelected ), NULL, this );
}

AutoGUI_About::AutoGUI_About( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxSize( 400,150 ), wxSize( 400,150 ) );
	
	wxFlexGridSizer* fgSizer1;
	fgSizer1 = new wxFlexGridSizer( 2, 2, 0, 0 );
	fgSizer1->SetFlexibleDirection( wxBOTH );
	fgSizer1->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
	
	m_bitmap3 = new wxStaticBitmap( this, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, 0 );
	fgSizer1->Add( m_bitmap3, 0, wxALL, 5 );
	
	m_staticText1 = new wxStaticText( this, wxID_ANY, wxT("TRIVA\nThRee dimensional Interactive Visualization Analysis\n\nReleased under GPL v3.0\n\nLucas Mello Schnorr\nschnorr@gmail.com"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText1->Wrap( -1 );
	m_staticText1->SetBackgroundColour( wxSystemSettings::GetColour( wxSYS_COLOUR_HIGHLIGHT ) );
	
	fgSizer1->Add( m_staticText1, 0, wxALL, 5 );
	
	this->SetSizer( fgSizer1 );
	this->Layout();
	
	this->Centre( wxBOTH );
}

AutoGUI_About::~AutoGUI_About()
{
}

BundleGUI::BundleGUI( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	
	wxBoxSizer* bSizer12;
	bSizer12 = new wxBoxSizer( wxVERTICAL );
	
	m_notebook2 = new wxNotebook( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0 );
	m_panel9 = new wxPanel( m_notebook2, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxBoxSizer* bSizer13;
	bSizer13 = new wxBoxSizer( wxVERTICAL );
	
	selectTraceButton = new wxButton( m_panel9, wxID_ANY, wxT("(Select Trace Files)"), wxDefaultPosition, wxDefaultSize, wxBU_LEFT );
	selectTraceButton->SetBackgroundColour( wxColour( 152, 198, 229 ) );
	
	bSizer13->Add( selectTraceButton, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText5 = new wxStaticText( m_panel9, wxID_ANY, wxT("Trace"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5->Wrap( -1 );
	bSizer13->Add( m_staticText5, 0, wxALL|wxEXPAND, 5 );
	
	traceFileOpened = new wxListBox( m_panel9, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, NULL, wxLB_ALWAYS_SB|wxLB_MULTIPLE ); 
	bSizer13->Add( traceFileOpened, 1, wxALL|wxEXPAND, 5 );
	
	removeTraceFileButton = new wxButton( m_panel9, wxID_ANY, wxT("Remove"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer13->Add( removeTraceFileButton, 0, wxALL, 5 );
	
	m_panel9->SetSizer( bSizer13 );
	m_panel9->Layout();
	bSizer13->Fit( m_panel9 );
	m_notebook2->AddPage( m_panel9, wxT("&Trace Files"), false );
	m_panel10 = new wxPanel( m_notebook2, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxBoxSizer* bSizer131;
	bSizer131 = new wxBoxSizer( wxVERTICAL );
	
	selectSyncButton = new wxButton( m_panel10, wxID_ANY, wxT("(Select Sync File)"), wxDefaultPosition, wxDefaultSize, wxBU_LEFT );
	selectSyncButton->SetBackgroundColour( wxColour( 152, 198, 229 ) );
	
	bSizer131->Add( selectSyncButton, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText51 = new wxStaticText( m_panel10, wxID_ANY, wxT("Sync"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText51->Wrap( -1 );
	bSizer131->Add( m_staticText51, 0, wxALL|wxEXPAND, 5 );
	
	syncFileOpened = new wxListBox( m_panel10, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, NULL, 0 ); 
	bSizer131->Add( syncFileOpened, 1, wxALL|wxEXPAND, 5 );
	
	removeSyncFileButton = new wxButton( m_panel10, wxID_ANY, wxT("Remove"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer131->Add( removeSyncFileButton, 0, wxALL, 5 );
	
	m_panel10->SetSizer( bSizer131 );
	m_panel10->Layout();
	bSizer131->Fit( m_panel10 );
	m_notebook2->AddPage( m_panel10, wxT("&Synchronization File"), false );
	m_panel5 = new wxPanel( m_notebook2, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxBoxSizer* bSizer6;
	bSizer6 = new wxBoxSizer( wxVERTICAL );
	
	wxArrayString setupCheckListChoices;
	setupCheckList = new wxCheckListBox( m_panel5, wxID_ANY, wxDefaultPosition, wxDefaultSize, setupCheckListChoices, wxLB_SORT );
	bSizer6->Add( setupCheckList, 1, wxALL|wxEXPAND, 5 );
	
	wxArrayString setupChoiceChoices;
	setupChoice = new wxChoice( m_panel5, wxID_ANY, wxDefaultPosition, wxDefaultSize, setupChoiceChoices, 0 );
	setupChoice->SetSelection( 0 );
	bSizer6->Add( setupChoice, 0, wxALL|wxEXPAND, 5 );
	
	m_panel5->SetSizer( bSizer6 );
	m_panel5->Layout();
	bSizer6->Fit( m_panel5 );
	m_notebook2->AddPage( m_panel5, wxT("Setup"), true );
	m_panel11 = new wxPanel( m_notebook2, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxBoxSizer* bSizer17;
	bSizer17 = new wxBoxSizer( wxVERTICAL );
	
	wxGridSizer* gSizer4;
	gSizer4 = new wxGridSizer( 1, 1, 0, 0 );
	
	statusText = new wxTextCtrl( m_panel11, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxHSCROLL|wxTE_CAPITALIZE|wxTE_CENTRE|wxTE_READONLY );
	statusText->SetFont( wxFont( 22, 77, 90, 92, false, wxT("Verdana") ) );
	statusText->SetForegroundColour( wxColour( 5, 255, 1 ) );
	
	gSizer4->Add( statusText, 0, wxALL|wxEXPAND, 5 );
	
	bSizer17->Add( gSizer4, 5, wxEXPAND, 5 );
	
	wxGridSizer* gSizer6;
	gSizer6 = new wxGridSizer( 1, 3, 0, 0 );
	
	
	gSizer6->Add( 0, 0, 1, wxEXPAND, 5 );
	
	
	gSizer6->Add( 0, 0, 1, wxEXPAND, 5 );
	
	activateButton = new wxButton( m_panel11, wxID_ANY, wxT("Activate"), wxDefaultPosition, wxDefaultSize, 0 );
	gSizer6->Add( activateButton, 0, wxALL|wxEXPAND, 5 );
	
	bSizer17->Add( gSizer6, 1, wxEXPAND, 5 );
	
	m_panel11->SetSizer( bSizer17 );
	m_panel11->Layout();
	bSizer17->Fit( m_panel11 );
	m_notebook2->AddPage( m_panel11, wxT("&Activation && Status"), false );
	
	bSizer12->Add( m_notebook2, 1, wxEXPAND | wxALL, 5 );
	
	this->SetSizer( bSizer12 );
	this->Layout();
	
	this->Centre( wxBOTH );
	
	// Connect Events
	selectTraceButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::traceFilePicker ), NULL, this );
	removeTraceFileButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::removeTraceFile ), NULL, this );
	selectSyncButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::syncFilePicker ), NULL, this );
	removeSyncFileButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::removeSyncFile ), NULL, this );
	activateButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::activate ), NULL, this );
}

BundleGUI::~BundleGUI()
{
	// Disconnect Events
	selectTraceButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::traceFilePicker ), NULL, this );
	removeTraceFileButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::removeTraceFile ), NULL, this );
	selectSyncButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::syncFilePicker ), NULL, this );
	removeSyncFileButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::removeSyncFile ), NULL, this );
	activateButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::activate ), NULL, this );
}

AutoGUI_Base::AutoGUI_Base( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxSize( 650,300 ), wxSize( 650,300 ) );
	
	wxBoxSizer* bSizer15;
	bSizer15 = new wxBoxSizer( wxVERTICAL );
	
	m_panel11 = new wxPanel( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxBoxSizer* bSizer10;
	bSizer10 = new wxBoxSizer( wxVERTICAL );
	
	base_type = new wxNotebook( m_panel11, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxNB_FLAT|wxNB_LEFT|wxNB_MULTILINE|wxNB_NOPAGETHEME|wxNB_RIGHT|wxNB_TOP );
	m_panel7 = new wxPanel( base_type, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxFlexGridSizer* fgSizer3;
	fgSizer3 = new wxFlexGridSizer( 2, 2, 0, 0 );
	fgSizer3->AddGrowableCol( 1 );
	fgSizer3->SetFlexibleDirection( wxBOTH );
	fgSizer3->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
	
	m_staticText7 = new wxStaticText( m_panel7, wxID_ANY, wxT("Configuration File:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText7->Wrap( -1 );
	fgSizer3->Add( m_staticText7, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT|wxTOP|wxBOTTOM|wxLEFT, 5 );
	
	configuration_file = new wxButton( m_panel7, wxID_ANY, wxT("(no file loaded)"), wxDefaultPosition, wxDefaultSize, 0 );
	fgSizer3->Add( configuration_file, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText8 = new wxStaticText( m_panel7, wxID_ANY, wxT("Width:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText8->Wrap( -1 );
	fgSizer3->Add( m_staticText8, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM|wxLEFT, 5 );
	
	width = new wxTextCtrl( m_panel7, wxID_ANY, wxT("600"), wxDefaultPosition, wxDefaultSize, wxTE_CENTRE|wxTE_DONTWRAP|wxTE_PROCESS_ENTER );
	fgSizer3->Add( width, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText9 = new wxStaticText( m_panel7, wxID_ANY, wxT("Height:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText9->Wrap( -1 );
	fgSizer3->Add( m_staticText9, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM|wxLEFT, 5 );
	
	height = new wxTextCtrl( m_panel7, wxID_ANY, wxT("600"), wxDefaultPosition, wxDefaultSize, wxTE_CENTRE|wxTE_DONTWRAP|wxTE_PROCESS_ENTER );
	fgSizer3->Add( height, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText20 = new wxStaticText( m_panel7, wxID_ANY, wxT("Dynamic Size:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText20->Wrap( -1 );
	fgSizer3->Add( m_staticText20, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM|wxLEFT, 5 );
	
	m_checkBox1 = new wxCheckBox( m_panel7, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
	
	m_checkBox1->Enable( false );
	
	fgSizer3->Add( m_checkBox1, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5 );
	
	m_panel7->SetSizer( fgSizer3 );
	m_panel7->Layout();
	fgSizer3->Fit( m_panel7 );
	base_type->AddPage( m_panel7, wxT("Resources Squarified Treemap"), false );
	m_panel8 = new wxPanel( base_type, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxFlexGridSizer* fgSizer311;
	fgSizer311 = new wxFlexGridSizer( 2, 2, 0, 0 );
	fgSizer311->AddGrowableCol( 1 );
	fgSizer311->SetFlexibleDirection( wxBOTH );
	fgSizer311->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
	
	m_staticText181 = new wxStaticText( m_panel8, wxID_ANY, wxT("GraphViz Algorithm:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText181->Wrap( -1 );
	fgSizer311->Add( m_staticText181, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT|wxTOP|wxBOTTOM|wxLEFT, 5 );
	
	wxString appgraph_choice1Choices[] = { wxT("dot"), wxT("neato"), wxT("fdp"), wxT("twopi"), wxT("circo") };
	int appgraph_choice1NChoices = sizeof( appgraph_choice1Choices ) / sizeof( wxString );
	appgraph_choice1 = new wxChoice( m_panel8, wxID_ANY, wxDefaultPosition, wxDefaultSize, appgraph_choice1NChoices, appgraph_choice1Choices, 0 );
	appgraph_choice1->SetSelection( 2 );
	fgSizer311->Add( appgraph_choice1, 0, wxALL, 5 );
	
	m_staticText81 = new wxStaticText( m_panel8, wxID_ANY, wxT("Size:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText81->Wrap( -1 );
	fgSizer311->Add( m_staticText81, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );
	
	appgraph_size = new wxTextCtrl( m_panel8, wxID_ANY, wxT("600"), wxDefaultPosition, wxDefaultSize, wxTE_CENTRE|wxTE_DONTWRAP|wxTE_PROCESS_ENTER );
	appgraph_size->Enable( false );
	
	fgSizer311->Add( appgraph_size, 0, wxALL, 5 );
	
	m_staticText15 = new wxStaticText( m_panel8, wxID_ANY, wxT("Separation Rate:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText15->Wrap( -1 );
	fgSizer311->Add( m_staticText15, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );
	
	m_textCtrl8 = new wxTextCtrl( m_panel8, wxID_ANY, wxT("2.0"), wxDefaultPosition, wxDefaultSize, wxTE_CENTRE );
	m_textCtrl8->Enable( false );
	
	fgSizer311->Add( m_textCtrl8, 0, wxALL, 5 );
	
	m_panel8->SetSizer( fgSizer311 );
	m_panel8->Layout();
	fgSizer311->Fit( m_panel8 );
	base_type->AddPage( m_panel8, wxT("Application Graph"), false );
	m_panel10 = new wxPanel( base_type, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxFlexGridSizer* fgSizer31;
	fgSizer31 = new wxFlexGridSizer( 2, 2, 0, 0 );
	fgSizer31->AddGrowableCol( 1 );
	fgSizer31->SetFlexibleDirection( wxBOTH );
	fgSizer31->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
	
	m_staticText71 = new wxStaticText( m_panel10, wxID_ANY, wxT("Configuration File:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText71->Wrap( -1 );
	fgSizer31->Add( m_staticText71, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT|wxTOP|wxBOTTOM|wxLEFT, 5 );
	
	rg_configuration_file = new wxButton( m_panel10, wxID_ANY, wxT("(no file loaded)"), wxDefaultPosition, wxDefaultSize, 0 );
	fgSizer31->Add( rg_configuration_file, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText18 = new wxStaticText( m_panel10, wxID_ANY, wxT("GraphViz Algorithm:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText18->Wrap( -1 );
	fgSizer31->Add( m_staticText18, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT|wxTOP|wxBOTTOM|wxLEFT, 5 );
	
	wxString rg_choiceChoices[] = { wxT("dot"), wxT("neato"), wxT("fdp"), wxT("twopi"), wxT("circo") };
	int rg_choiceNChoices = sizeof( rg_choiceChoices ) / sizeof( wxString );
	rg_choice = new wxChoice( m_panel10, wxID_ANY, wxDefaultPosition, wxDefaultSize, rg_choiceNChoices, rg_choiceChoices, 0 );
	rg_choice->SetSelection( 2 );
	fgSizer31->Add( rg_choice, 0, wxALL, 5 );
	
	m_staticText811 = new wxStaticText( m_panel10, wxID_ANY, wxT("Size:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText811->Wrap( -1 );
	fgSizer31->Add( m_staticText811, 0, wxALL|wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT, 5 );
	
	rg_size = new wxTextCtrl( m_panel10, wxID_ANY, wxT("600"), wxDefaultPosition, wxDefaultSize, wxTE_CENTRE|wxTE_DONTWRAP|wxTE_PROCESS_ENTER );
	rg_size->Enable( false );
	
	fgSizer31->Add( rg_size, 0, wxALL, 5 );
	
	m_staticText14 = new wxStaticText( m_panel10, wxID_ANY, wxT("Separation Rate:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText14->Wrap( -1 );
	fgSizer31->Add( m_staticText14, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );
	
	rg_sep = new wxTextCtrl( m_panel10, wxID_ANY, wxT("2.0"), wxDefaultPosition, wxDefaultSize, wxTE_CENTRE );
	fgSizer31->Add( rg_sep, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
	
	m_panel10->SetSizer( fgSizer31 );
	m_panel10->Layout();
	fgSizer31->Fit( m_panel10 );
	base_type->AddPage( m_panel10, wxT("Resources Graph"), true );
	
	bSizer10->Add( base_type, 1, wxEXPAND | wxALL, 5 );
	
	m_staticline3 = new wxStaticLine( m_panel11, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
	bSizer10->Add( m_staticline3, 0, wxEXPAND | wxALL, 5 );
	
	wxBoxSizer* bSizer111;
	bSizer111 = new wxBoxSizer( wxHORIZONTAL );
	
	m_button17 = new wxButton( m_panel11, wxID_ANY, wxT("&Apply"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer111->Add( m_button17, 0, wxALL, 5 );
	
	m_button18 = new wxButton( m_panel11, wxID_ANY, wxT("&Close"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer111->Add( m_button18, 0, wxALL, 5 );
	
	bSizer10->Add( bSizer111, 0, wxALIGN_RIGHT, 5 );
	
	m_panel11->SetSizer( bSizer10 );
	m_panel11->Layout();
	bSizer10->Fit( m_panel11 );
	bSizer15->Add( m_panel11, 1, wxEXPAND | wxALL, 5 );
	
	this->SetSizer( bSizer15 );
	this->Layout();
	status = this->CreateStatusBar( 1, wxST_SIZEGRIP, wxID_ANY );
	
	this->Centre( wxBOTH );
	
	// Connect Events
	this->Connect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( AutoGUI_Base::onClose ) );
	configuration_file->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Base::load ), NULL, this );
	rg_configuration_file->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Base::rg_load_graph ), NULL, this );
	m_button17->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Base::apply ), NULL, this );
	m_button18->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Base::close ), NULL, this );
}

AutoGUI_Base::~AutoGUI_Base()
{
	// Disconnect Events
	this->Disconnect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( AutoGUI_Base::onClose ) );
	configuration_file->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Base::load ), NULL, this );
	rg_configuration_file->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Base::rg_load_graph ), NULL, this );
	m_button17->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Base::apply ), NULL, this );
	m_button18->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Base::close ), NULL, this );
}

AutoGUI_Preferences::AutoGUI_Preferences( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	
	wxBoxSizer* bSizer15;
	bSizer15 = new wxBoxSizer( wxVERTICAL );
	
	m_panel13 = new wxPanel( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxBoxSizer* bSizer10;
	bSizer10 = new wxBoxSizer( wxVERTICAL );
	
	wxFlexGridSizer* fgSizer3;
	fgSizer3 = new wxFlexGridSizer( 2, 2, 0, 0 );
	fgSizer3->AddGrowableCol( 1 );
	fgSizer3->SetFlexibleDirection( wxBOTH );
	fgSizer3->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
	
	m_staticText18 = new wxStaticText( m_panel13, wxID_ANY, wxT("Start Time:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText18->Wrap( -1 );
	fgSizer3->Add( m_staticText18, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );
	
	startTimeSlider = new wxSlider( m_panel13, wxID_ANY, 0, 0, 100, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL );
	fgSizer3->Add( startTimeSlider, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText19 = new wxStaticText( m_panel13, wxID_ANY, wxT("End Time:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText19->Wrap( -1 );
	fgSizer3->Add( m_staticText19, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );
	
	endTimeSlider = new wxSlider( m_panel13, wxID_ANY, 100, 0, 100, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL );
	fgSizer3->Add( endTimeSlider, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText22 = new wxStaticText( m_panel13, wxID_ANY, wxT("Time Window:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText22->Wrap( -1 );
	fgSizer3->Add( m_staticText22, 0, wxALL, 5 );
	
	timeWindowText = new wxStaticText( m_panel13, wxID_ANY, wxT("0"), wxDefaultPosition, wxDefaultSize, 0 );
	timeWindowText->Wrap( -1 );
	fgSizer3->Add( timeWindowText, 0, wxALL, 5 );
	
	m_staticText20 = new wxStaticText( m_panel13, wxID_ANY, wxT("Total Time:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText20->Wrap( -1 );
	fgSizer3->Add( m_staticText20, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );
	
	totalTimeText = new wxStaticText( m_panel13, wxID_ANY, wxT("0"), wxDefaultPosition, wxDefaultSize, 0 );
	totalTimeText->Wrap( -1 );
	fgSizer3->Add( totalTimeText, 0, wxALL, 5 );
	
	bSizer10->Add( fgSizer3, 1, wxEXPAND, 5 );
	
	m_staticline3 = new wxStaticLine( m_panel13, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
	bSizer10->Add( m_staticline3, 0, wxEXPAND | wxALL, 5 );
	
	wxBoxSizer* bSizer111;
	bSizer111 = new wxBoxSizer( wxHORIZONTAL );
	
	m_button17 = new wxButton( m_panel13, wxID_ANY, wxT("&Apply"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer111->Add( m_button17, 0, wxALL, 5 );
	
	m_button18 = new wxButton( m_panel13, wxID_ANY, wxT("&Close"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer111->Add( m_button18, 0, wxALL, 5 );
	
	bSizer10->Add( bSizer111, 0, wxALIGN_RIGHT, 5 );
	
	m_panel13->SetSizer( bSizer10 );
	m_panel13->Layout();
	bSizer10->Fit( m_panel13 );
	bSizer15->Add( m_panel13, 1, wxEXPAND | wxALL, 5 );
	
	this->SetSizer( bSizer15 );
	this->Layout();
	statusBar = this->CreateStatusBar( 1, wxST_SIZEGRIP, wxID_ANY );
	
	// Connect Events
	this->Connect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( AutoGUI_Preferences::onClose ) );
	startTimeSlider->Connect( wxEVT_SCROLL_TOP, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	startTimeSlider->Connect( wxEVT_SCROLL_BOTTOM, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	startTimeSlider->Connect( wxEVT_SCROLL_LINEUP, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	startTimeSlider->Connect( wxEVT_SCROLL_LINEDOWN, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	startTimeSlider->Connect( wxEVT_SCROLL_PAGEUP, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	startTimeSlider->Connect( wxEVT_SCROLL_PAGEDOWN, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	startTimeSlider->Connect( wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	startTimeSlider->Connect( wxEVT_SCROLL_THUMBRELEASE, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	startTimeSlider->Connect( wxEVT_SCROLL_CHANGED, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	endTimeSlider->Connect( wxEVT_SCROLL_TOP, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	endTimeSlider->Connect( wxEVT_SCROLL_BOTTOM, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	endTimeSlider->Connect( wxEVT_SCROLL_LINEUP, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	endTimeSlider->Connect( wxEVT_SCROLL_LINEDOWN, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	endTimeSlider->Connect( wxEVT_SCROLL_PAGEUP, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	endTimeSlider->Connect( wxEVT_SCROLL_PAGEDOWN, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	endTimeSlider->Connect( wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	endTimeSlider->Connect( wxEVT_SCROLL_THUMBRELEASE, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	endTimeSlider->Connect( wxEVT_SCROLL_CHANGED, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	m_button17->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Preferences::apply ), NULL, this );
	m_button18->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Preferences::close ), NULL, this );
}

AutoGUI_Preferences::~AutoGUI_Preferences()
{
	// Disconnect Events
	this->Disconnect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( AutoGUI_Preferences::onClose ) );
	startTimeSlider->Disconnect( wxEVT_SCROLL_TOP, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	startTimeSlider->Disconnect( wxEVT_SCROLL_BOTTOM, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	startTimeSlider->Disconnect( wxEVT_SCROLL_LINEUP, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	startTimeSlider->Disconnect( wxEVT_SCROLL_LINEDOWN, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	startTimeSlider->Disconnect( wxEVT_SCROLL_PAGEUP, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	startTimeSlider->Disconnect( wxEVT_SCROLL_PAGEDOWN, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	startTimeSlider->Disconnect( wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	startTimeSlider->Disconnect( wxEVT_SCROLL_THUMBRELEASE, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	startTimeSlider->Disconnect( wxEVT_SCROLL_CHANGED, wxScrollEventHandler( AutoGUI_Preferences::startTimeSliderChanged ), NULL, this );
	endTimeSlider->Disconnect( wxEVT_SCROLL_TOP, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	endTimeSlider->Disconnect( wxEVT_SCROLL_BOTTOM, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	endTimeSlider->Disconnect( wxEVT_SCROLL_LINEUP, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	endTimeSlider->Disconnect( wxEVT_SCROLL_LINEDOWN, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	endTimeSlider->Disconnect( wxEVT_SCROLL_PAGEUP, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	endTimeSlider->Disconnect( wxEVT_SCROLL_PAGEDOWN, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	endTimeSlider->Disconnect( wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	endTimeSlider->Disconnect( wxEVT_SCROLL_THUMBRELEASE, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	endTimeSlider->Disconnect( wxEVT_SCROLL_CHANGED, wxScrollEventHandler( AutoGUI_Preferences::endTimeSliderChanged ), NULL, this );
	m_button17->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Preferences::apply ), NULL, this );
	m_button18->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Preferences::close ), NULL, this );
}

AutoGUI_CombinedCounter::AutoGUI_CombinedCounter( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	
	wxBoxSizer* bSizer21;
	bSizer21 = new wxBoxSizer( wxVERTICAL );
	
	m_panel14 = new wxPanel( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxBoxSizer* bSizer19;
	bSizer19 = new wxBoxSizer( wxVERTICAL );
	
	m_panel13 = new wxPanel( m_panel14, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxBoxSizer* bSizer24;
	bSizer24 = new wxBoxSizer( wxVERTICAL );
	
	m_panel15 = new wxPanel( m_panel13, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxFlexGridSizer* fgSizer8;
	fgSizer8 = new wxFlexGridSizer( 2, 3, 0, 0 );
	fgSizer8->SetFlexibleDirection( wxHORIZONTAL );
	fgSizer8->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
	
	m_staticText18 = new wxStaticText( m_panel15, wxID_ANY, wxT("State Types"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText18->Wrap( -1 );
	fgSizer8->Add( m_staticText18, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );
	
	
	fgSizer8->Add( 0, 0, 1, wxEXPAND, 5 );
	
	
	fgSizer8->Add( 0, 0, 1, wxEXPAND, 5 );
	
	wxArrayString stateTypeListValuesChoices;
	stateTypeListValues = new wxChoice( m_panel15, wxID_ANY, wxDefaultPosition, wxDefaultSize, stateTypeListValuesChoices, 0 );
	stateTypeListValues->SetSelection( 0 );
	fgSizer8->Add( stateTypeListValues, 0, wxALL, 5 );
	
	stateTypeWeight = new wxTextCtrl( m_panel15, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
	fgSizer8->Add( stateTypeWeight, 0, wxALL, 5 );
	
	stateTypeAdd = new wxButton( m_panel15, wxID_ANY, wxT("Add"), wxDefaultPosition, wxDefaultSize, 0 );
	fgSizer8->Add( stateTypeAdd, 0, wxALL, 5 );
	
	m_panel15->SetSizer( fgSizer8 );
	m_panel15->Layout();
	fgSizer8->Fit( m_panel15 );
	bSizer24->Add( m_panel15, 1, wxEXPAND | wxALL, 5 );
	
	combinedConfiguration = new wxTextCtrl( m_panel13, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY|wxTE_WORDWRAP );
	bSizer24->Add( combinedConfiguration, 0, wxEXPAND|wxALL, 5 );
	
	m_panel13->SetSizer( bSizer24 );
	m_panel13->Layout();
	bSizer24->Fit( m_panel13 );
	bSizer19->Add( m_panel13, 1, wxEXPAND | wxALL, 5 );
	
	m_staticline5 = new wxStaticLine( m_panel14, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
	bSizer19->Add( m_staticline5, 0, wxEXPAND | wxALL, 5 );
	
	wxBoxSizer* bSizer20;
	bSizer20 = new wxBoxSizer( wxHORIZONTAL );
	
	m_button21 = new wxButton( m_panel14, wxID_ANY, wxT("Clear"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer20->Add( m_button21, 0, wxALL, 5 );
	
	m_button22 = new wxButton( m_panel14, wxID_ANY, wxT("&Apply"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer20->Add( m_button22, 0, wxALL, 5 );
	
	m_button23 = new wxButton( m_panel14, wxID_ANY, wxT("&Close"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer20->Add( m_button23, 0, wxALL, 5 );
	
	bSizer19->Add( bSizer20, 0, wxALIGN_RIGHT, 5 );
	
	m_panel14->SetSizer( bSizer19 );
	m_panel14->Layout();
	bSizer19->Fit( m_panel14 );
	bSizer21->Add( m_panel14, 1, wxEXPAND | wxALL, 5 );
	
	this->SetSizer( bSizer21 );
	this->Layout();
	m_statusBar3 = this->CreateStatusBar( 1, wxST_SIZEGRIP, wxID_ANY );
	
	this->Centre( wxBOTH );
	
	// Connect Events
	this->Connect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( AutoGUI_CombinedCounter::onClose ) );
	stateTypeAdd->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_CombinedCounter::addStateType ), NULL, this );
	m_button21->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_CombinedCounter::clear ), NULL, this );
	m_button22->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_CombinedCounter::apply ), NULL, this );
	m_button23->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_CombinedCounter::close ), NULL, this );
}

AutoGUI_CombinedCounter::~AutoGUI_CombinedCounter()
{
	// Disconnect Events
	this->Disconnect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( AutoGUI_CombinedCounter::onClose ) );
	stateTypeAdd->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_CombinedCounter::addStateType ), NULL, this );
	m_button21->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_CombinedCounter::clear ), NULL, this );
	m_button22->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_CombinedCounter::apply ), NULL, this );
	m_button23->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_CombinedCounter::close ), NULL, this );
}
