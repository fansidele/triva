///////////////////////////////////////////////////////////////////////////
// C++ code generated with wxFormBuilder (version Apr 21 2008)
// http://www.wxformbuilder.org/
//
// PLEASE DO "NOT" EDIT THIS FILE!
///////////////////////////////////////////////////////////////////////////

#include "Triva3DFrame.h"

#include "TrivaAutoGeneratedGUI.h"

///////////////////////////////////////////////////////////////////////////

TrivaAutoGeneratedGUI::TrivaAutoGeneratedGUI( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	
	wxBoxSizer* bSizer3;
	bSizer3 = new wxBoxSizer( wxVERTICAL );
	
	m3DFrame = new Triva3DFrame( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	bSizer3->Add( m3DFrame, 1, wxEXPAND|wxALL|wxALIGN_CENTER_HORIZONTAL, 0 );
	
	m_scrollBar2 = new wxScrollBar( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSB_HORIZONTAL );
	bSizer3->Add( m_scrollBar2, 0, wxALL|wxEXPAND, 5 );
	
	this->SetSizer( bSizer3 );
	this->Layout();
	m_menubar2 = new wxMenuBar( 0 );
	application = new wxMenu();
	wxMenuItem* m_menuItem6;
	m_menuItem6 = new wxMenuItem( application, wxID_OPEN, wxString( wxT("Load &KAAPI Bundle") ) , wxEmptyString, wxITEM_NORMAL );
	application->Append( m_menuItem6 );
	
	wxMenuItem* m_menuItem5;
	m_menuItem5 = new wxMenuItem( application, wxID_EXIT, wxString( wxT("E&xit") ) , wxEmptyString, wxITEM_NORMAL );
	application->Append( m_menuItem5 );
	
	m_menubar2->Append( application, wxT("Application") );
	
	m_menu3 = new wxMenu();
	clabels = new wxMenuItem( m_menu3, wxID_ANY, wxString( wxT("Containers Labels") ) , wxEmptyString, wxITEM_CHECK );
	m_menu3->Append( clabels );
	clabels->Check( true );
	
	slabels = new wxMenuItem( m_menu3, wxID_ANY, wxString( wxT("States Labels") ) , wxEmptyString, wxITEM_CHECK );
	m_menu3->Append( slabels );
	slabels->Check( true );
	
	wxMenuItem* m_menuItem61;
	m_menuItem61 = new wxMenuItem( m_menu3, wxID_ANY, wxString( wxT("Fullscreen") ) , wxEmptyString, wxITEM_CHECK );
	m_menu3->Append( m_menuItem61 );
	m_menuItem61->Enable( false );
	
	wxMenuItem* m_menuItem17;
	m_menuItem17 = new wxMenuItem( m_menu3, wxID_ANY, wxString( wxT("Visualization Base") ) , wxEmptyString, wxITEM_CHECK );
	m_menu3->Append( m_menuItem17 );
	
	m_menubar2->Append( m_menu3, wxT("View") );
	
	navigation = new wxMenu();
	wxMenuItem* forward;
	forward = new wxMenuItem( navigation, wxID_ANY, wxString( wxT("Forward") ) + wxT('\t') + wxT("ALT+8"), wxEmptyString, wxITEM_NORMAL );
	navigation->Append( forward );
	
	wxMenuItem* backward;
	backward = new wxMenuItem( navigation, wxID_ANY, wxString( wxT("Backward") ) + wxT('\t') + wxT("ALT+2"), wxEmptyString, wxITEM_NORMAL );
	navigation->Append( backward );
	
	wxMenuItem* left;
	left = new wxMenuItem( navigation, wxID_ANY, wxString( wxT("Left") ) + wxT('\t') + wxT("ALT+6"), wxEmptyString, wxITEM_NORMAL );
	navigation->Append( left );
	
	wxMenuItem* right;
	right = new wxMenuItem( navigation, wxID_ANY, wxString( wxT("Right") ) + wxT('\t') + wxT("ALT+6"), wxEmptyString, wxITEM_NORMAL );
	navigation->Append( right );
	
	wxMenuItem* up;
	up = new wxMenuItem( navigation, wxID_ANY, wxString( wxT("Up") ) + wxT('\t') + wxT("ALT+7"), wxEmptyString, wxITEM_NORMAL );
	navigation->Append( up );
	
	wxMenuItem* down;
	down = new wxMenuItem( navigation, wxID_ANY, wxString( wxT("Down") ) + wxT('\t') + wxT("ALT+1"), wxEmptyString, wxITEM_NORMAL );
	navigation->Append( down );
	
	m_menubar2->Append( navigation, wxT("Camera") );
	
	m_menu5 = new wxMenu();
	treemap_squarified = new wxMenuItem( m_menu5, wxID_ANY, wxString( wxT("Squarified Treemap") ) , wxEmptyString, wxITEM_CHECK );
	m_menu5->Append( treemap_squarified );
	
	treemap_original = new wxMenuItem( m_menu5, wxID_ANY, wxString( wxT("Original Treemap") ) , wxEmptyString, wxITEM_CHECK );
	m_menu5->Append( treemap_original );
	treemap_original->Enable( false );
	
	graph_resources = new wxMenuItem( m_menu5, wxID_ANY, wxString( wxT("Graph of Resources") ) , wxEmptyString, wxITEM_CHECK );
	m_menu5->Append( graph_resources );
	graph_resources->Enable( false );
	
	graph_application = new wxMenuItem( m_menu5, wxID_ANY, wxString( wxT("Graph of Application") ) , wxEmptyString, wxITEM_CHECK );
	m_menu5->Append( graph_application );
	graph_application->Check( true );
	
	m_menubar2->Append( m_menu5, wxT("Base") );
	
	m_menu6 = new wxMenu();
	wxMenuItem* m_menuItem9;
	m_menuItem9 = new wxMenuItem( m_menu6, wxID_ABOUT, wxString( wxT("About...") ) , wxEmptyString, wxITEM_NORMAL );
	m_menu6->Append( m_menuItem9 );
	
	m_menubar2->Append( m_menu6, wxT("Help") );
	
	this->SetMenuBar( m_menubar2 );
	
	toolbar = this->CreateToolBar( wxTB_DOCKABLE|wxTB_NOICONS|wxTB_TEXT, wxID_ANY ); 
	playButton = new wxButton( toolbar, wxID_ANY, wxT("Play"), wxDefaultPosition, wxDefaultSize, 0 );
	toolbar->AddControl( playButton );
	pauseButton = new wxButton( toolbar, wxID_ANY, wxT("Pause"), wxDefaultPosition, wxDefaultSize, 0 );
	toolbar->AddControl( pauseButton );
	toolbar->AddSeparator();
	ZoomInB = new wxButton( toolbar, wxID_ANY, wxT("Zoom&In"), wxDefaultPosition, wxDefaultSize, 0 );
	toolbar->AddControl( ZoomInB );
	zoomOutB = new wxButton( toolbar, wxID_ANY, wxT("zoom&Out"), wxDefaultPosition, wxDefaultSize, 0 );
	toolbar->AddControl( zoomOutB );
	toolbar->AddSeparator();
	colorButton = new wxButton( toolbar, wxID_ANY, wxT("Color"), wxDefaultPosition, wxDefaultSize, 0 );
	colorButton->Enable( false );
	
	toolbar->AddControl( colorButton );
	toolbar->AddSeparator();
	mergeButton = new wxButton( toolbar, wxID_ANY, wxT("Merge"), wxDefaultPosition, wxDefaultSize, 0 );
	mergeButton->Enable( false );
	
	toolbar->AddControl( mergeButton );
	toolbar->Realize();
	
	statusBar = this->CreateStatusBar( 1, wxST_SIZEGRIP, wxID_ANY );
	
	this->Centre( wxBOTH );
	
	// Connect Events
	this->Connect( wxEVT_KILL_FOCUS, wxFocusEventHandler( TrivaAutoGeneratedGUI::killFocus ) );
	this->Connect( wxEVT_SET_FOCUS, wxFocusEventHandler( TrivaAutoGeneratedGUI::setFocus ) );
	this->Connect( m_menuItem6->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::loadBundle ) );
	this->Connect( m_menuItem5->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::exit ) );
	this->Connect( clabels->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::containerLabels ) );
	this->Connect( slabels->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::stateLabels ) );
	this->Connect( m_menuItem17->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::guiBaseSelection ) );
	this->Connect( forward->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::cameraForward ) );
	this->Connect( backward->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::cameraBackward ) );
	this->Connect( left->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::cameraLeft ) );
	this->Connect( right->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::cameraRight ) );
	this->Connect( up->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::cameraUp ) );
	this->Connect( down->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::cameraDown ) );
	this->Connect( treemap_squarified->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::squarifiedTreemap ) );
	this->Connect( treemap_original->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::originalTreemap ) );
	this->Connect( graph_resources->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::resourcesGraph ) );
	this->Connect( graph_application->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::applicationGraph ) );
	this->Connect( m_menuItem9->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::about ) );
	playButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( TrivaAutoGeneratedGUI::playClicked ), NULL, this );
	pauseButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( TrivaAutoGeneratedGUI::pauseClicked ), NULL, this );
	ZoomInB->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( TrivaAutoGeneratedGUI::zoomIn ), NULL, this );
	zoomOutB->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( TrivaAutoGeneratedGUI::zoomOut ), NULL, this );
	colorButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( TrivaAutoGeneratedGUI::changeColor ), NULL, this );
	mergeButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( TrivaAutoGeneratedGUI::mergeSelected ), NULL, this );
}

TrivaAutoGeneratedGUI::~TrivaAutoGeneratedGUI()
{
	// Disconnect Events
	this->Disconnect( wxEVT_KILL_FOCUS, wxFocusEventHandler( TrivaAutoGeneratedGUI::killFocus ) );
	this->Disconnect( wxEVT_SET_FOCUS, wxFocusEventHandler( TrivaAutoGeneratedGUI::setFocus ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::loadBundle ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::exit ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::containerLabels ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::stateLabels ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::guiBaseSelection ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::cameraForward ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::cameraBackward ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::cameraLeft ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::cameraRight ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::cameraUp ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::cameraDown ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::squarifiedTreemap ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::originalTreemap ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::resourcesGraph ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::applicationGraph ) );
	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( TrivaAutoGeneratedGUI::about ) );
	playButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( TrivaAutoGeneratedGUI::playClicked ), NULL, this );
	pauseButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( TrivaAutoGeneratedGUI::pauseClicked ), NULL, this );
	ZoomInB->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( TrivaAutoGeneratedGUI::zoomIn ), NULL, this );
	zoomOutB->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( TrivaAutoGeneratedGUI::zoomOut ), NULL, this );
	colorButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( TrivaAutoGeneratedGUI::changeColor ), NULL, this );
	mergeButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( TrivaAutoGeneratedGUI::mergeSelected ), NULL, this );
}

TrivaAboutGui::TrivaAboutGui( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxSize( 400,150 ), wxSize( 400,150 ) );
	
	wxFlexGridSizer* fgSizer1;
	fgSizer1 = new wxFlexGridSizer( 2, 2, 0, 0 );
	fgSizer1->SetFlexibleDirection( wxBOTH );
	fgSizer1->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
	
	m_bitmap3 = new wxStaticBitmap( this, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, 0 );
	fgSizer1->Add( m_bitmap3, 0, wxALL, 5 );
	
	m_staticText1 = new wxStaticText( this, wxID_ANY, wxT("TRIVA\nThRee dimensional Interactive Visualization Analysis\n\nReleased under GPL v3.0\n\nLucas Mello Schnorr\nschnorr@gmail.com"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText1->Wrap( -1 );
	m_staticText1->SetBackgroundColour( wxSystemSettings::GetColour( wxSYS_COLOUR_HIGHLIGHT ) );
	
	fgSizer1->Add( m_staticText1, 0, wxALL, 5 );
	
	this->SetSizer( fgSizer1 );
	this->Layout();
	
	this->Centre( wxBOTH );
}

TrivaAboutGui::~TrivaAboutGui()
{
}

BundleGUI::BundleGUI( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	
	wxBoxSizer* bSizer12;
	bSizer12 = new wxBoxSizer( wxVERTICAL );
	
	m_notebook2 = new wxNotebook( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0 );
	m_panel9 = new wxPanel( m_notebook2, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxBoxSizer* bSizer13;
	bSizer13 = new wxBoxSizer( wxVERTICAL );
	
	selectTraceButton = new wxButton( m_panel9, wxID_ANY, wxT("(Select Trace Files)"), wxDefaultPosition, wxDefaultSize, wxBU_LEFT );
	selectTraceButton->SetBackgroundColour( wxColour( 152, 198, 229 ) );
	
	bSizer13->Add( selectTraceButton, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText5 = new wxStaticText( m_panel9, wxID_ANY, wxT("Trace"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText5->Wrap( -1 );
	bSizer13->Add( m_staticText5, 0, wxALL|wxEXPAND, 5 );
	
	traceFileOpened = new wxListBox( m_panel9, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, NULL, wxLB_ALWAYS_SB|wxLB_MULTIPLE ); 
	bSizer13->Add( traceFileOpened, 1, wxALL|wxEXPAND, 5 );
	
	removeTraceFileButton = new wxButton( m_panel9, wxID_ANY, wxT("Remove"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer13->Add( removeTraceFileButton, 0, wxALL, 5 );
	
	m_panel9->SetSizer( bSizer13 );
	m_panel9->Layout();
	bSizer13->Fit( m_panel9 );
	m_notebook2->AddPage( m_panel9, wxT("&Trace Files"), false );
	m_panel10 = new wxPanel( m_notebook2, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxBoxSizer* bSizer131;
	bSizer131 = new wxBoxSizer( wxVERTICAL );
	
	selectSyncButton = new wxButton( m_panel10, wxID_ANY, wxT("(Select Sync File)"), wxDefaultPosition, wxDefaultSize, wxBU_LEFT );
	selectSyncButton->SetBackgroundColour( wxColour( 152, 198, 229 ) );
	
	bSizer131->Add( selectSyncButton, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText51 = new wxStaticText( m_panel10, wxID_ANY, wxT("Sync"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText51->Wrap( -1 );
	bSizer131->Add( m_staticText51, 0, wxALL|wxEXPAND, 5 );
	
	syncFileOpened = new wxListBox( m_panel10, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, NULL, 0 ); 
	bSizer131->Add( syncFileOpened, 1, wxALL|wxEXPAND, 5 );
	
	removeSyncFileButton = new wxButton( m_panel10, wxID_ANY, wxT("Remove"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer131->Add( removeSyncFileButton, 0, wxALL, 5 );
	
	m_panel10->SetSizer( bSizer131 );
	m_panel10->Layout();
	bSizer131->Fit( m_panel10 );
	m_notebook2->AddPage( m_panel10, wxT("&Synchronization File"), false );
	m_panel5 = new wxPanel( m_notebook2, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxBoxSizer* bSizer6;
	bSizer6 = new wxBoxSizer( wxVERTICAL );
	
	wxArrayString setupCheckListChoices;
	setupCheckList = new wxCheckListBox( m_panel5, wxID_ANY, wxDefaultPosition, wxDefaultSize, setupCheckListChoices, wxLB_SORT );
	bSizer6->Add( setupCheckList, 1, wxALL|wxEXPAND, 5 );
	
	wxArrayString setupChoiceChoices;
	setupChoice = new wxChoice( m_panel5, wxID_ANY, wxDefaultPosition, wxDefaultSize, setupChoiceChoices, 0 );
	setupChoice->SetSelection( 0 );
	bSizer6->Add( setupChoice, 0, wxALL|wxEXPAND, 5 );
	
	m_panel5->SetSizer( bSizer6 );
	m_panel5->Layout();
	bSizer6->Fit( m_panel5 );
	m_notebook2->AddPage( m_panel5, wxT("Setup"), true );
	m_panel11 = new wxPanel( m_notebook2, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxBoxSizer* bSizer17;
	bSizer17 = new wxBoxSizer( wxVERTICAL );
	
	wxGridSizer* gSizer4;
	gSizer4 = new wxGridSizer( 1, 1, 0, 0 );
	
	statusText = new wxTextCtrl( m_panel11, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxHSCROLL|wxTE_CAPITALIZE|wxTE_CENTRE|wxTE_READONLY );
	statusText->SetFont( wxFont( 22, 77, 90, 92, false, wxT("Verdana") ) );
	statusText->SetForegroundColour( wxColour( 5, 255, 1 ) );
	
	gSizer4->Add( statusText, 0, wxALL|wxEXPAND, 5 );
	
	bSizer17->Add( gSizer4, 5, wxEXPAND, 5 );
	
	wxGridSizer* gSizer6;
	gSizer6 = new wxGridSizer( 1, 3, 0, 0 );
	
	
	gSizer6->Add( 0, 0, 1, wxEXPAND, 5 );
	
	
	gSizer6->Add( 0, 0, 1, wxEXPAND, 5 );
	
	activateButton = new wxButton( m_panel11, wxID_ANY, wxT("Activate"), wxDefaultPosition, wxDefaultSize, 0 );
	gSizer6->Add( activateButton, 0, wxALL|wxEXPAND, 5 );
	
	bSizer17->Add( gSizer6, 1, wxEXPAND, 5 );
	
	m_panel11->SetSizer( bSizer17 );
	m_panel11->Layout();
	bSizer17->Fit( m_panel11 );
	m_notebook2->AddPage( m_panel11, wxT("&Activation && Status"), false );
	
	bSizer12->Add( m_notebook2, 1, wxEXPAND | wxALL, 5 );
	
	this->SetSizer( bSizer12 );
	this->Layout();
	
	this->Centre( wxBOTH );
	
	// Connect Events
	selectTraceButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::traceFilePicker ), NULL, this );
	removeTraceFileButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::removeTraceFile ), NULL, this );
	selectSyncButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::syncFilePicker ), NULL, this );
	removeSyncFileButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::removeSyncFile ), NULL, this );
	activateButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::activate ), NULL, this );
}

BundleGUI::~BundleGUI()
{
	// Disconnect Events
	selectTraceButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::traceFilePicker ), NULL, this );
	removeTraceFileButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::removeTraceFile ), NULL, this );
	selectSyncButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::syncFilePicker ), NULL, this );
	removeSyncFileButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::removeSyncFile ), NULL, this );
	activateButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( BundleGUI::activate ), NULL, this );
}

AutoGUI_Base::AutoGUI_Base( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	this->SetSizeHints( wxSize( 380,270 ), wxSize( 380,270 ) );
	
	wxBoxSizer* bSizer9;
	bSizer9 = new wxBoxSizer( wxHORIZONTAL );
	
	m_panel6 = new wxPanel( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxBoxSizer* bSizer12;
	bSizer12 = new wxBoxSizer( wxVERTICAL );
	
	wxFlexGridSizer* fgSizer3;
	fgSizer3 = new wxFlexGridSizer( 2, 2, 0, 0 );
	fgSizer3->AddGrowableCol( 1 );
	fgSizer3->SetFlexibleDirection( wxBOTH );
	fgSizer3->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
	
	m_staticText6 = new wxStaticText( m_panel6, wxID_ANY, wxT("Base Type:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText6->Wrap( -1 );
	fgSizer3->Add( m_staticText6, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT|wxTOP|wxBOTTOM|wxLEFT, 5 );
	
	wxString base_typeChoices[] = { wxT("Resources Squarified Treemap"), wxT("Application Graph") };
	int base_typeNChoices = sizeof( base_typeChoices ) / sizeof( wxString );
	base_type = new wxChoice( m_panel6, wxID_ANY, wxDefaultPosition, wxDefaultSize, base_typeNChoices, base_typeChoices, 0 );
	base_type->SetSelection( 0 );
	fgSizer3->Add( base_type, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText7 = new wxStaticText( m_panel6, wxID_ANY, wxT("Configuration File:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText7->Wrap( -1 );
	fgSizer3->Add( m_staticText7, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT|wxTOP|wxBOTTOM|wxLEFT, 5 );
	
	configuration_file = new wxButton( m_panel6, wxID_ANY, wxT("(no file loaded)"), wxDefaultPosition, wxDefaultSize, 0 );
	fgSizer3->Add( configuration_file, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText8 = new wxStaticText( m_panel6, wxID_ANY, wxT("Width:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText8->Wrap( -1 );
	fgSizer3->Add( m_staticText8, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM|wxLEFT, 5 );
	
	width = new wxTextCtrl( m_panel6, wxID_ANY, wxT("600"), wxDefaultPosition, wxDefaultSize, wxTE_CENTRE|wxTE_DONTWRAP|wxTE_PROCESS_ENTER );
	fgSizer3->Add( width, 0, wxALL|wxEXPAND, 5 );
	
	m_staticText9 = new wxStaticText( m_panel6, wxID_ANY, wxT("Height:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_staticText9->Wrap( -1 );
	fgSizer3->Add( m_staticText9, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM|wxLEFT, 5 );
	
	height = new wxTextCtrl( m_panel6, wxID_ANY, wxT("600"), wxDefaultPosition, wxDefaultSize, wxTE_CENTRE|wxTE_DONTWRAP|wxTE_PROCESS_ENTER );
	fgSizer3->Add( height, 0, wxALL|wxEXPAND, 5 );
	
	bSizer12->Add( fgSizer3, 1, wxEXPAND, 5 );
	
	m_staticline1 = new wxStaticLine( m_panel6, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
	bSizer12->Add( m_staticline1, 0, wxEXPAND | wxALL, 5 );
	
	wxBoxSizer* bSizer11;
	bSizer11 = new wxBoxSizer( wxHORIZONTAL );
	
	m_button17 = new wxButton( m_panel6, wxID_ANY, wxT("&Apply"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer11->Add( m_button17, 0, wxALL, 5 );
	
	m_button18 = new wxButton( m_panel6, wxID_ANY, wxT("&Close"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer11->Add( m_button18, 0, wxALL, 5 );
	
	bSizer12->Add( bSizer11, 0, wxALIGN_RIGHT, 5 );
	
	m_panel6->SetSizer( bSizer12 );
	m_panel6->Layout();
	bSizer12->Fit( m_panel6 );
	bSizer9->Add( m_panel6, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL, 5 );
	
	this->SetSizer( bSizer9 );
	this->Layout();
	status = this->CreateStatusBar( 1, wxST_SIZEGRIP, wxID_ANY );
	
	this->Centre( wxBOTH );
	
	// Connect Events
	base_type->Connect( wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler( AutoGUI_Base::choice ), NULL, this );
	configuration_file->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Base::load ), NULL, this );
	m_button17->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Base::apply ), NULL, this );
	m_button18->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Base::close ), NULL, this );
}

AutoGUI_Base::~AutoGUI_Base()
{
	// Disconnect Events
	base_type->Disconnect( wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler( AutoGUI_Base::choice ), NULL, this );
	configuration_file->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Base::load ), NULL, this );
	m_button17->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Base::apply ), NULL, this );
	m_button18->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( AutoGUI_Base::close ), NULL, this );
}
